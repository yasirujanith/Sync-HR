/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package payrollsystemnew.view.mainpage;

import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import payrollsystemnew.controller.AttendanceController;
import payrollsystemnew.controller.EmployeeController;
import payrollsystemnew.controller.UserController;
import payrollsystemnew.model.Attendance;
import payrollsystemnew.model.Employee;
import payrollsystemnew.model.Leaves;
import payrollsystemnew.view.employee.AddEmployeePanel;
import payrollsystemnew.view.employee.EditEmployeePanel;
import payrollsystemnew.view.employee.GrantLeavePanel;
import payrollsystemnew.view.employee.SearchEmployeePanel;
import payrollsystemnew.view.employee.VeiwAttendaceViaDatePanel;
import payrollsystemnew.view.employee.ViewAttendanceViaEmployeePanel;
import payrollsystemnew.view.employee.ViewEmployeePanel;
import payrollsystemnew.view.employee.ViewEmployeeViaDeptPanel;
import payrollsystemnew.view.employee.ViewEmpoyeeViaGradePanel;
import payrollsystemnew.view.employee.ViewLeaveDetailsViaDatePanel;
import payrollsystemnew.view.employee.ViewLeaveDetailsViaEmployeePanel;
import payrollsystemnew.view.payment.AddDamagePanel;
import payrollsystemnew.view.payment.GrantBonusViaDeptPanel;
import payrollsystemnew.view.payment.GrantLoanPanel;
import payrollsystemnew.view.payment.GrantSalaryAdvancePanel;
import payrollsystemnew.view.payment.SalaryPaymentPanel;
import payrollsystemnew.view.payment.ViewAdvanceSalaryDetailsViaDatePanel;
import payrollsystemnew.view.payment.ViewAdvanceSalaryDetailsViaEmployeePanel;
import payrollsystemnew.view.payment.ViewDamageDetailsViaEmployeePanel;
import payrollsystemnew.view.payment.ViewEPF_ETFdetailsViaEmployeePanel;
import payrollsystemnew.view.payment.ViewLoanDetailsViaDatePanel;
import payrollsystemnew.view.payment.ViewLoanDetailsViaEmployeePanel;
import payrollsystemnew.view.payment.ViewSalaryDetailsViaDatePanel;
import payrollsystemnew.view.payment.ViewSalaryPaymentDetailsViaEmployeePanel;

/**
 *
 * @author User
 */
public class MainFrameForm extends javax.swing.JFrame {

    int shortLeaveMaxCount = 2;
    boolean isFinalized = false;
    public static MainFrameForm form;

    /**
     * Creates new form MainFrameForm
     */
    public MainFrameForm() {
        try {
            initComponents();
            form = this;
            setLocationRelativeTo(null);
            setDate();
            setTime();
            userNameLable.setText(UserController.getCurrentUser());
            employeeIDText.requestFocus();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MainFrameForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        paymentButton = new javax.swing.JButton();
        userButton = new javax.swing.JButton();
        employeeButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        employeeIDText = new javax.swing.JTextField();
        validityLable = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        firstNameText = new javax.swing.JTextField();
        lastNameText = new javax.swing.JTextField();
        nicText = new javax.swing.JTextField();
        timeText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        dateLable = new javax.swing.JLabel();
        timeLable = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        loadingPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        userNameLable = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paymentButton.setBackground(new java.awt.Color(0, 0, 0));
        paymentButton.setFont(new java.awt.Font("Baskerville Old Face", 0, 24)); // NOI18N
        paymentButton.setForeground(new java.awt.Color(255, 255, 255));
        paymentButton.setText("Payment");
        paymentButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                paymentButtonMouseEntered(evt);
            }
        });
        paymentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentButtonActionPerformed(evt);
            }
        });
        jPanel1.add(paymentButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 230, 60));

        userButton.setBackground(new java.awt.Color(0, 0, 0));
        userButton.setFont(new java.awt.Font("Baskerville Old Face", 0, 24)); // NOI18N
        userButton.setForeground(new java.awt.Color(255, 255, 255));
        userButton.setText("User");
        userButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                userButtonMouseEntered(evt);
            }
        });
        userButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userButtonActionPerformed(evt);
            }
        });
        jPanel1.add(userButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 230, 60));

        employeeButton.setBackground(new java.awt.Color(0, 0, 0));
        employeeButton.setFont(new java.awt.Font("Baskerville Old Face", 0, 24)); // NOI18N
        employeeButton.setForeground(new java.awt.Color(255, 255, 255));
        employeeButton.setText("Employee");
        employeeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                employeeButtonMouseEntered(evt);
            }
        });
        employeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(employeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 230, 60));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mark Attendance", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 16), java.awt.Color.white)); // NOI18N
        jPanel3.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Emp. ID :");

        employeeIDText.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        employeeIDText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeIDTextActionPerformed(evt);
            }
        });

        validityLable.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        validityLable.setForeground(new java.awt.Color(204, 204, 204));
        validityLable.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("First Name :");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Last Name :");

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("NIC :");

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("Time :");

        firstNameText.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        lastNameText.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        nicText.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        timeText.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("Hrs");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(employeeIDText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(nicText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                .addComponent(lastNameText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(firstNameText, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(validityLable, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(employeeIDText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validityLable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(firstNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lastNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nicText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 230, 290));

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("--- SyncHR ---");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1126, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 50));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.white));
        jPanel4.setOpaque(false);

        dateLable.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        dateLable.setForeground(new java.awt.Color(204, 204, 204));

        timeLable.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        timeLable.setForeground(new java.awt.Color(204, 204, 204));

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("Hours");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(dateLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(timeLable, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateLable, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(timeLable, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 230, 150));

        loadingPanel.setOpaque(false);
        loadingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadingPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout loadingPanelLayout = new javax.swing.GroupLayout(loadingPanel);
        loadingPanel.setLayout(loadingPanelLayout);
        loadingPanelLayout.setHorizontalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 890, Short.MAX_VALUE)
        );
        loadingPanelLayout.setVerticalGroup(
            loadingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 580, Short.MAX_VALUE)
        );

        jPanel1.add(loadingPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 890, 580));

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        exitButton.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Logged as :");

        userNameLable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        userNameLable.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameLable, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 369, Short.MAX_VALUE)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userNameLable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitButton, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 630, 900, 50));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/payrollsystemnew/images/Background.jpg"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 680));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void employeeIDTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeIDTextActionPerformed
        try {
            markAttendance();
        } catch (ClassNotFoundException | SQLException | ParseException ex) {
            Logger.getLogger(MainFrameForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_employeeIDTextActionPerformed

    private void employeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeButtonActionPerformed
        loadingPanel.removeAll();
        EmployeePanel p1 = new EmployeePanel();
        p1.setSize(loadingPanel.getSize());
        p1.repaint();
        p1.revalidate();
        loadingPanel.add(p1);
    }//GEN-LAST:event_employeeButtonActionPerformed

    private void paymentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentButtonActionPerformed
        loadingPanel.removeAll();
        PaymentPanel p1 = new PaymentPanel();
        p1.setSize(loadingPanel.getSize());
        p1.repaint();
        p1.revalidate();
        loadingPanel.add(p1);
    }//GEN-LAST:event_paymentButtonActionPerformed

    private void loadingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadingPanelMouseClicked

    }//GEN-LAST:event_loadingPanelMouseClicked

    private void userButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userButtonActionPerformed
        try {
            if("Administrator".equals(UserController.getCurrentUser())){
                loadingPanel.removeAll();
                AdminUserPanel p1=new AdminUserPanel();
                p1.setSize(loadingPanel.getSize());
                p1.repaint();
                p1.revalidate();
                loadingPanel.add(p1);
            }else{
                loadingPanel.removeAll();
                UserPanel p1=new UserPanel();
                p1.setSize(loadingPanel.getSize());
                p1.repaint();
                p1.revalidate();
                loadingPanel.add(p1);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MainFrameForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_userButtonActionPerformed

    private void employeeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeButtonMouseEntered
        
    }//GEN-LAST:event_employeeButtonMouseEntered

    private void paymentButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentButtonMouseEntered
        
    }//GEN-LAST:event_paymentButtonMouseEntered

    private void userButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userButtonMouseEntered
        
    }//GEN-LAST:event_userButtonMouseEntered

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        try {
            SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
            UserController.userLogOut(UserController.getCurrentUser(), timeFormat.format(new Date()));
            System.exit(0);

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(MainFrameForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrameForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrameForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateLable;
    private javax.swing.JButton employeeButton;
    private javax.swing.JTextField employeeIDText;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField firstNameText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTextField lastNameText;
    private javax.swing.JPanel loadingPanel;
    private javax.swing.JTextField nicText;
    private javax.swing.JButton paymentButton;
    private javax.swing.JLabel timeLable;
    private javax.swing.JTextField timeText;
    private javax.swing.JButton userButton;
    private javax.swing.JLabel userNameLable;
    private javax.swing.JLabel validityLable;
    // End of variables declaration//GEN-END:variables
    private void markAttendance() throws ClassNotFoundException, SQLException, ParseException{
        if (!EmployeeController.isThereLeave(employeeIDText.getText(), dateLable.getText())) {
            ArrayList<Employee> employeeList = EmployeeController.getAllEmployees();
            boolean b = false;
            for (Employee employee : employeeList) {
                if (employeeIDText.getText().equals(employee.getEmployeeID())) {
                    b = true;
                    firstNameText.setText(employee.getFirstName());
                    lastNameText.setText(employee.getLastName());
                    nicText.setText(employee.getNIC());
                    timeText.setText(timeLable.getText());
                    break;
                }
            }
            if (b == true) {
                validityLable.setText("Valid ID");
                validityLable.setForeground(Color.WHITE);
                Date currentTime = null, fiveThirty = null, eightThirty = null, tweleveThirty = null, ten = null;
                try {
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
                    currentTime = timeFormat.parse(timeLable.getText());
                    fiveThirty = timeFormat.parse("17:30:00");
                    eightThirty = timeFormat.parse("08:30:00");
                    ten = timeFormat.parse("10:00:00");
                    tweleveThirty = timeFormat.parse("12:30:00");
                } catch (ParseException ex) {
                    Logger.getLogger(MainFrameForm.class.getName()).log(Level.SEVERE, null, ex);
                }

                //============================================================================================
                String date = dateLable.getText();
                String time = timeLable.getText();
                String employeeID = employeeIDText.getText();
                boolean isInMarked = AttendanceController.isEmployeeMarkedIn(employeeID, date);
                if (currentTime.before(eightThirty) && isInMarked == false) {
                    AttendanceController.markIn(new Attendance(employeeID, date, time, null, null, null, null));
                } else if (currentTime.after(eightThirty) && currentTime.before(ten) && isInMarked == false) {
                    int shortLeaveCount = AttendanceController.getShortLeaveCount(employeeID, date);
                    if (shortLeaveCount < shortLeaveMaxCount) {
                        AttendanceController.markLateIn(new Attendance(employeeID, date, null, null, time, null, null));
                    } else {
                        AttendanceController.markIn(new Attendance(employeeID, date, time, null, null, null, null));
                        EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Half Day Leave", "Being Late to markIn"));
                    }
                } else if (currentTime.after(ten) && currentTime.before(tweleveThirty) && isInMarked == false) {
                    AttendanceController.markIn(new Attendance(employeeID, date, time, null, null, null, null));
                    EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Half Day Leave", "Being late to markIn"));
                } else if (currentTime.after(tweleveThirty) && isInMarked == false) {
                    firstNameText.setText("");
                    lastNameText.setText("");
                    nicText.setText("");
                    timeText.setText("");
                    validityLable.setText("Access Denied.");
                    validityLable.setForeground(Color.red);
                } else {
                    Attendance attendance = AttendanceController.searchEmployeeAttendace(employeeID, date);
                    if (currentTime.before(tweleveThirty) && attendance.getOutTime() == null) {
                        if (attendance.getShortLeaveOuttime() == null) {
                            AttendanceController.markShortLeaveOut(new Attendance(employeeID, date, null, time, null, null, null));
                        } else if (attendance.getShortLeaveIntime() == null) {
                            if (AttendanceController.isShortLeaveValid(employeeID, date)) {
                                AttendanceController.markShortLeaveIn(new Attendance(employeeID, date, null, null, time, null, null));
                            } else {
                                AttendanceController.removeShortLeave(new Attendance(employeeID, date, null, null, null, null, null));
                                EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Half Day Leave", "Being late to shortLeaveMarkIn"));
                            }
                        } else {
                            Object[] options = {"Leave Out", "Cancel"};
                            int response = JOptionPane.showOptionDialog(this, "You've taken a short leave today. Do you want to Leave Out?", "Warning", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                            if (response == 0) {
                                AttendanceController.markOut(new Attendance(employeeID, date, null, null, null, time, "0"));
                                if (EmployeeController.isThereHalfDayLeave(employeeID, date)) {
                                    System.out.println(1111);
                                    EmployeeController.updateShortLeaveDetail(employeeID, date);
                                } else {
                                    EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Leave", "Emergency leave"));
                                }
                            }
                        }
                    } else if (currentTime.after(tweleveThirty) && currentTime.before(fiveThirty) && attendance.getOutTime() == null) {
                        if (attendance.getShortLeaveOuttime() == null) {
                            AttendanceController.markShortLeaveOut(new Attendance(employeeID, date, null, time, null, null, null));
                        } else if (attendance.getShortLeaveIntime() == null) {
                            if (AttendanceController.isShortLeaveValid(employeeID, date)) {
                                AttendanceController.markShortLeaveIn(new Attendance(employeeID, date, null, null, time, null, null));
                            } else {
                                double inOutDifferenceInHours = getTimeDifference(timeLable.getText(), attendance.getShortLeaveOuttime());
                                if (inOutDifferenceInHours < 4.0) {
                                    if (EmployeeController.isThereHalfDayLeave(employeeID, date)) {
                                        EmployeeController.updateShortLeaveDetail(employeeID, date);
                                        AttendanceController.markOut(new Attendance(employeeID, date, null, null, null, attendance.getShortLeaveOuttime(), "0"));
                                    } else {
                                        EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Half Day Leave", "Being late to shortLeaveMarkIn"));
                                    }
                                } else {
                                    AttendanceController.markOut(new Attendance(employeeID, date, null, null, null, attendance.getShortLeaveOuttime(), "0"));
                                    if (EmployeeController.isThereHalfDayLeave(employeeID, date)) {
                                        EmployeeController.updateShortLeaveDetail(employeeID, date);
                                    } else {
                                        EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Leave", "Being late to shortLeaveMarkIn"));
                                    }
                                }
                                AttendanceController.removeShortLeave(new Attendance(employeeID, date, null, null, null, null, null));
                            }
                        } else {
                            Object[] options = {"Leave Out", "Cancel"};
                            int response = JOptionPane.showOptionDialog(this, "You've taken a short leave today. Do you want to Leave Out?", "Warning", JOptionPane.CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
                            if (response == 0) {
                                if (EmployeeController.isThereHalfDayLeave(employeeID, date)) {
                                    EmployeeController.updateShortLeaveDetail(employeeID, date);
                                } else {
                                    EmployeeController.addLeaveDetail(new Leaves(employeeID, date, "Leave", "Not enough working hours."));
                                }
                                AttendanceController.markOut(new Attendance(employeeID, date, null, null, null, time, "0"));
                            }
                        }
                    } else if (currentTime.after(fiveThirty) && attendance.getOutTime() == null) {
                        if (isFinalized == false) {
                            finalizeMarkOut();
                            isFinalized = true;
                        }
                        int OTHours = 0;
                        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
                        int OTMinutes = getTimeDifferenceInMinutes(timeLable.getText(), timeFormat.format(fiveThirty));
                        OTHours += OTMinutes / 60;
                        if (OTHours > 0 && (OTMinutes % 60) > 45) {
                            OTHours++;
                        }
                        AttendanceController.markOut(new Attendance(employeeID, date, null, null, null, time, Integer.toString(OTHours)));
                    } else {
                        firstNameText.setText("");
                        lastNameText.setText("");
                        nicText.setText("");
                        timeText.setText("");
                        validityLable.setText("Access Denied.");
                        validityLable.setForeground(Color.red);
                    }
                }
            } else {
                firstNameText.setText("");
                lastNameText.setText("");
                nicText.setText("");
                timeText.setText("");
                validityLable.setText("Invalid ID");
                validityLable.setForeground(Color.red);
            }
        } else {
            firstNameText.setText("");
            lastNameText.setText("");
            nicText.setText("");
            timeText.setText("");
            validityLable.setText("Access Denied.");
            validityLable.setForeground(Color.red);
        }
    }
    
    private void setDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = dateFormat.format(date);
        dateLable.setText(formattedDate);
    }

    private double getTimeDifference(String inTime, String outTime) throws ParseException {
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
        Date in = timeFormat.parse(inTime);
        Date out = timeFormat.parse(outTime);
        double difference = in.getTime() - out.getTime();
        return difference / 1000 / 60 / 60;
    }

    private int getTimeDifferenceInMinutes(String currentTime, String leaveTime) throws ParseException {
        SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
        Date cTime = timeFormat.parse(currentTime);
        Date lTime = timeFormat.parse(leaveTime);
        double difference = cTime.getTime() - lTime.getTime();
        return (int) (difference / 1000 / 60);
    }

    private void finalizeMarkOut() throws ClassNotFoundException, SQLException, ParseException {
        ArrayList<Attendance> attendanceList = AttendanceController.getAllAttendance(dateLable.getText());
        for (Attendance attendance : attendanceList) {
            if (attendance.getShortLeaveOuttime() != null && attendance.getShortLeaveIntime() == null) {
                String employeeID = attendance.getEmployeeID();
                String outTime = attendance.getShortLeaveOuttime();
                AttendanceController.markOut(new Attendance(employeeID, dateLable.getText(), null, null, null, outTime, "0"));
                AttendanceController.removeShortLeave(new Attendance(employeeID, dateLable.getText(), null, null, null, null, null));
                if (getTimeDifference("17:30:00", outTime) > 4) {
                    EmployeeController.addLeaveDetail(new Leaves(employeeID, dateLable.getText(), "Leave", "failed to shortLeaveMarkIn"));
                } else {
                    EmployeeController.addLeaveDetail(new Leaves(employeeID, dateLable.getText(), "Half Day Leave", "failed to shortLeaveMarkIn"));
                }
            }
        }
        ArrayList<Employee> employeeList=EmployeeController.getAllEmployees();
        for(Employee employee : employeeList){
            if(AttendanceController.isEmployeeMarkedIn(employee.getEmployeeID(), dateLable.getText())==false){
                if(!EmployeeController.isThereLeave(employee.getEmployeeID(), dateLable.getText())){
                    EmployeeController.addLeaveDetail(new Leaves(employee.getEmployeeID(), dateLable.getText(), "Leave", "Didn't Report"));
                }
            }
        }
    }

    private void setTime() {
        new Thread() {
            @Override
            public void run() {
                while (true) {
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
                    timeLable.setText(timeFormat.format(new Date()));
                }
            }
        }.start();
    }

    public void loadAddEmployeePanel() {
        loadingPanel.removeAll();
        AddEmployeePanel p1 = new AddEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();

    }

    public void loadSearchEmployeePanel() {
        loadingPanel.removeAll();
        SearchEmployeePanel p1 = new SearchEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadEditEmployeePanel() {
        loadingPanel.removeAll();
        EditEmployeePanel p1 = new EditEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewEmployeePanel() {
        loadingPanel.removeAll();
        ViewEmployeePanel p1 = new ViewEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewEmployeeViaDeptPanel() {
        loadingPanel.removeAll();
        ViewEmployeeViaDeptPanel p1 = new ViewEmployeeViaDeptPanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewEmployeeViaGradePanel() {
        loadingPanel.removeAll();
        ViewEmpoyeeViaGradePanel p1 = new ViewEmpoyeeViaGradePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewLeaveDetailsViaEmployeePanel() {
        loadingPanel.removeAll();
        ViewLeaveDetailsViaEmployeePanel p1 = new ViewLeaveDetailsViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadGrantLeavePanel() {
        loadingPanel.removeAll();
        GrantLeavePanel p1 = new GrantLeavePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewAttendaceViaEmployeePanel() {
        loadingPanel.removeAll();
        ViewAttendanceViaEmployeePanel p1 = new ViewAttendanceViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewAttendaceViaDatePanel() {
        loadingPanel.removeAll();
        VeiwAttendaceViaDatePanel p1 = new VeiwAttendaceViaDatePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadSalaryPaymentPanel() {
        loadingPanel.removeAll();
        SalaryPaymentPanel p1 = new SalaryPaymentPanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadGrantLoanPanel() {
        loadingPanel.removeAll();
        GrantLoanPanel p1 = new GrantLoanPanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadGrantSalaryAdvancePanel() {
        loadingPanel.removeAll();
        GrantSalaryAdvancePanel p1 = new GrantSalaryAdvancePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadGrantBonusViaDeptPanel() {
        loadingPanel.removeAll();
        GrantBonusViaDeptPanel p1 = new GrantBonusViaDeptPanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadAddDamagesPanel() {
        loadingPanel.removeAll();
        AddDamagePanel p1 = new AddDamagePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewLoanDetailsViaEmployeePanel() {
        loadingPanel.removeAll();
        ViewLoanDetailsViaEmployeePanel p1 = new ViewLoanDetailsViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewLoanDetailsViaDatePanel() {
        loadingPanel.removeAll();
        ViewLoanDetailsViaDatePanel p1 = new ViewLoanDetailsViaDatePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewSalaryPaymentDetailsViaEmployeePanel() {
        loadingPanel.removeAll();
        ViewSalaryPaymentDetailsViaEmployeePanel p1 = new ViewSalaryPaymentDetailsViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewSalaryAdvanceDetailsViaEmployeePanel() {
        loadingPanel.removeAll();
        ViewAdvanceSalaryDetailsViaEmployeePanel p1 = new ViewAdvanceSalaryDetailsViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewSalaryAdvanceDetailsViaDatePanel() {
        loadingPanel.removeAll();
        ViewAdvanceSalaryDetailsViaDatePanel p1 = new ViewAdvanceSalaryDetailsViaDatePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewLeaveDetailsViaDatePanel() {
        loadingPanel.removeAll();
        ViewLeaveDetailsViaDatePanel p1 = new ViewLeaveDetailsViaDatePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewDamageDetailsViaDatePanel() {
        loadingPanel.removeAll();
        ViewDamageDetailsViaEmployeePanel p1 = new ViewDamageDetailsViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewEPF_ETFDetailsViaEmployeePanel() {
        loadingPanel.removeAll();
        ViewEPF_ETFdetailsViaEmployeePanel p1 = new ViewEPF_ETFdetailsViaEmployeePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }

    public void loadViewSalaryDetailsViaDatePanel() {
        loadingPanel.removeAll();
        ViewSalaryDetailsViaDatePanel p1 = new ViewSalaryDetailsViaDatePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }
    
    public void loadViewManageBonusPanel() {
        loadingPanel.removeAll();
        AddDamagePanel p1 = new AddDamagePanel();
        p1.setSize(loadingPanel.getSize());
        loadingPanel.add(p1);
        loadingPanel.repaint();
        loadingPanel.revalidate();
    }
}
